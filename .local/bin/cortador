#!/bin/bash


# Ask which folder

folder_selection=$(printf "Home\nDownloads\nVideos" | dmenu -p "Choose target folder:")
[ -z "$folder_selection" ] $$ notify-send "No folder chosen. Exiting." && exit 1

case "$folder_selection" in
	Home) folder_path="$HOME" ;;
	Downloads) folder_path="$HOME/Downloads" ;;
	Videos) folder_path="$HOME/Videos" ;;
	*) notify-send "Invalid folder. Exiting." ; exit 1 ;;
esac

# Build file list
file_list=()
while IFS= read -r file; do
    file_list+=("$(basename "$file")")
done < <(find "$folder_path" -maxdepth 1 -name "*.mp4")

# Ask which file

file_selection=$(printf "%s\n" "${file_list[@]}" | dmenu -p "Select file:")
[ -z "$file_selection" ] && notify-send "No file selected. Exiting." && exit 1


VIDEO="$folder_path/$file_selection"


# Ask for start time (e.g., 00:01:55.5)
START=$(echo "" | dmenu -p "Start time (hh:mm:ss or seconds):")

if [ -z "$START" ]; then
  echo "No start time entered."
  exit 1
fi

# Ask for end time (e.g., 00:02:01 or seconds)
END=$(echo "" | dmenu -p "End time (hh:mm:ss or seconds):")

if [ -z "$END" ]; then
  echo "No end time entered."
  exit 1
fi

# Notify start
notify-send "Cutter" "Cutting started..."

# Convert start and end times to seconds (for duration calculation)
to_seconds() {
  if [[ $1 =~ ^[0-9]+:[0-9]{2}:[0-9]{2}(\.[0-9]+)?$ ]]; then
    IFS=: read -r h m s <<< "$1"
    echo "$(echo "$h*3600 + $m*60 + $s" | bc -l)"
  elif [[ $1 =~ ^[0-9]+:[0-9]{2}(\.[0-9]+)?$ ]]; then
    IFS=: read -r m s <<< "$1"
    echo "$(echo "$m*60 + $s" | bc -l)"
  else
    echo "$1"
  fi
}

start_sec=$(to_seconds "$START")
end_sec=$(to_seconds "$END")

duration=$(echo "$end_sec - $start_sec" | bc -l)

if (( $(echo "$duration <= 0" | bc -l) )); then
  echo "End time must be greater than start time."
  exit 1
fi

# Generate output filename
EXT="${VIDEO##*.}"
BASE="${VIDEO%.*}"
OUTPUT="${BASE}_cut_${START//:/-}_to_${END//:/-}.$EXT"

# Run ffmpeg (copy codec for fast cutting)
ffmpeg -ss "$START" -i "$VIDEO" -t "$duration" -c copy "$OUTPUT"

# Notify success or failure
if [ $? -eq 0 ]; then
	notify-send "Cutter" "Altenations finished"
else
	notify-send "Cutter" "Errors occured"
fi
